%% Transfer Learning FC
% This script trains a fully connected layer on the feature space generated by Resnet50 avg-pool layer
%% Specification
clear
clc
close all
Path_to_script = pwd;
addpath(genpath(Path_to_script))
li = 'avg-pool'; % Specify the layer in Resnet50 that should be used to extract the feature space
file_format = ""; % Specify the file format here (e.g tiff/tif/jpg)
Path_to_data = "";% Specify the path to the directory with labelled sub-directories
Path_to_save = "";% Specify the path to directory in which the trained model will be saved
Orien = "AP"; % Specify the orientation (e.g AP, LR, or DV)
%% load the dataset
cd(Path_to_data)
fprintf("Loading images into an imds ...\n");
imds = imageDatastore(Path_to_data,'IncludeSubfolders',true,'LabelSource','foldernames');
[imdsTrain,imdsValidation,imdsTest] = splitEachLabel(imds,0.6,0.25,0.15,'randomized');
net = resnet50;
name = "resnet50_" + Orien+ "FC"+".mat";
%% Training A Fully connected layer
pixelRange = [-30 30];
imageAugmenter = imageDataAugmenter('RandXReflection',true,'RandYReflection',true,'RandXTranslation',pixelRange,'RandYTranslation',pixelRange);
augimdsTrain = augmentedImageDatastore(inputSize(1:2),imdsTrain,'ColorPreprocessing','gray2rgb','DataAugmentation',imageAugmenter);
augimdsTest = augmentedImageDatastore(inputSize(1:2),imdsTest,'ColorPreprocessing','gray2rgb');
augimdsVal = augmentedImageDatastore(inputSize(1:2),imdsValidation,'ColorPreprocessing','gray2rgb','DataAugmentation',imageAugmenter);
Train_f = activations(net,augimdsTrain,li);
Test_f = activations(net,augimdsTest,li);
Val_f = activations(net,augimdsVal,li);
clear augimdsTrain
clear augimdsTest
clear augimdsVal

% Training the FC network
fprintf("Training the network ...\n");
layer = [
    imageInputLayer([size(Train_f,1) size(Train_f,2) size(Train_f,3)])
    fullyConnectedLayer(length(imds.Labels))
    softmaxLayer()
    classificationLayer()
    ];

options = trainingOptions('adam', ...
    'MaxEpochs',400, ...
    'ValidationData',{Val_f imdsValidation.Labels}, ...
    'ValidationFrequency',5, ...
    'Shuffle','every-epoch', ...
    'ValidationPatience',5, ...
    'Plots','none', ...
    'LearnRateDropFactor',0.95, ...
    'LearnRateSchedule','piecewise',...
    'InitialLearnRate',1e-3);

[New_net,acc,preds,scores] = Train_net(imdsTrain,imdsTrain.Labels,layer,options);

% Test the network on the labelled data
[preds,prb] = classify(New_net,Test_f);
acc = nnz(preds == imdsTest.Labels)/length(imdsTest.Files);
clear Test_f
fprintf("The accuracy of the trained FC on unseen images is %s",string(acc));

cd(Path_to_save)
save(name,'New_net');


